--- a/cmake/FindRdKafka.cmake
+++ b/cmake/FindRdKafka.cmake
@@
 set(CONTENTS "#include <librdkafka/rdkafka.h>\n #if RD_KAFKA_VERSION >= ${RDKAFKA_MIN_VERSION_HEX}\n int main() { }\n #endif")
 set(FILE_NAME ${CMAKE_CURRENT_BINARY_DIR}/rdkafka_version_test.cpp)
 file(WRITE ${FILE_NAME} ${CONTENTS})

 try_compile(RdKafka_FOUND ${CMAKE_CURRENT_BINARY_DIR}
             SOURCES ${FILE_NAME}
             CMAKE_FLAGS "-DINCLUDE_DIRECTORIES=${RdKafka_INCLUDE_DIR}")

+set(_try_compile_dir "${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles/CMakeTmp")
+message(STATUS "try_compile RdKafka_FOUND = ${RdKafka_FOUND}")
+message(STATUS "Try compile output dir: ${_try_compile_dir}")
+if (NOT RdKafka_FOUND)
+  file(GLOB _error_logs "${_try_compile_dir}/CMakeError.log")
+  foreach (_log ${_error_logs})
+    message(STATUS "---- Begin CMakeError.log ----")
+    file(READ "${_log}" _log_contents)
+    string(REPLACE "\n" "\n  " _log_contents "${_log_contents}")
+    message(STATUS "  ${_log_contents}")
+    message(STATUS "---- End CMakeError.log ----")
+  endforeach()
+endif()

 if (RdKafka_FOUND)
     add_library(RdKafka::rdkafka ${RDKAFKA_LIBRARY_TYPE} IMPORTED GLOBAL)
     if (UNIX AND NOT APPLE)
