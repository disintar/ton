name: windows-build-ton-cpython

on:
  push:
    branches: [ feature/windows ]
  pull_request:
    branches: [ feature/windows ]
  workflow_dispatch:
  workflow_call:

defaults:
  run:
    shell: cmd

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Setup Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'

      - name: Print OS info
        run: |
          systeminfo | findstr /B /C:"OS Name" /C:"OS Version"

      - name: Compute 3pp cache key
        id: third-party-key
        shell: bash
        run: |
          echo "key=${{ runner.os }}-${{ runner.arch }}-windows-2022-3pp-$(sha256sum ./assembly/native/build-3pp.bat | cut -c1-16)" >> "$GITHUB_OUTPUT"

      - name: Restore 3pp
        uses: actions/cache/restore@v4
        with:
          path: ${{ runner.temp }}\3pp_clear\
          key: ${{ steps.third-party-key.outputs.key }}

      - name: Build 3pp
        run: |
          assembly\native\build-3pp.bat

      - name: Check 3pp build status
        id: check-third-party
        shell: powershell
        run: |
          $statusPath = Join-Path $env:RUNNER_TEMP '3pp/3pp_status.txt'
          if (Test-Path $statusPath) {
            $content = Get-Content $statusPath -Raw
            if ($content -match 'NEED_CACHE=true') {
              echo "cache=true" >> $env:GITHUB_OUTPUT
            } else {
              echo "cache=false" >> $env:GITHUB_OUTPUT
            }
          } else {
            echo "cache=false" >> $env:GITHUB_OUTPUT
          }

      - name: Save 3pp
        if: steps.check-third-party.outputs.cache == 'true' && github.event_name != 'pull_request'
        uses: actions/cache/save@v4
        with:
          path: ${{ runner.temp }}\3pp_clear\
          key: ${{ steps.third-party-key.outputs.key }}

      - name: Build TON (Windows)
        run: |
          git submodule sync --recursive
          git submodule update
          copy assembly\native\build-windows-github-2022.bat .
          copy assembly\native\build-windows-2022.bat .
          echo Using RDKAFKA_ROOT=%RDKAFKA_ROOT%
          build-windows-github-2022.bat Enterprise

      - name: Set release env
        shell: bash
        run: |
          echo "RELEASE_NAME=ton-cpython-313-x86_64-windows" >> $GITHUB_ENV

      - name: Simple python import test
        run: |
          cd artifacts && ls && python -c "import python_ton"

      - name: Upload artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME }}
          path: artifacts

      - name: Create release
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          gh release delete -y "$RELEASE_NAME" || true
          gh release create --notes "Windows 2022 Python 3.13 build" "$RELEASE_NAME" artifacts/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
